# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13dZr0_5jcQRgQLhFx7rqyIXGCijH_vLL
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix

# Função para leitura segura de dados
def ler_dados(caminho: str):
    try:
        df = pd.read_csv(caminho)
        print("Dados lidos com sucesso.")
        return df
    except Exception as e:
        print(f"Erro ao ler os dados: {e}")
        return None

# Função para preparação de base e treino de modelo
def preparar_base(df: pd.DataFrame):
    X = df.drop("mau", axis=1)
    y = df["mau"]

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, stratify=y, random_state=42
    )

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    modelo = RandomForestClassifier(
        max_depth=3,
        max_leaf_nodes=10,
        min_samples_leaf=1,
        min_samples_split=2,
        class_weight="balanced",
        random_state=42
    )

    modelo.fit(X_train_scaled, y_train)
    return modelo, X_test_scaled, y_test, scaler, X.columns

# Processamento de novo dado
def processar_novo_dado(new_data: dict, reference_columns: list, scaler: StandardScaler):
    new_data_df = pd.DataFrame([new_data])
    new_data_df = pd.get_dummies(new_data_df)
    new_data_df = new_data_df.reindex(columns=reference_columns, fill_value=0)
    new_data_scaled = scaler.transform(new_data_df)
    return new_data_scaled

# Predição de inadimplência
def prever_inadimplencia(model, new_data, reference_columns, scaler):
    new_data_scaled = processar_novo_dado(new_data, reference_columns, scaler)
    probas = model.predict_proba(new_data_scaled)
    return probas[0]

# Função principal
def main():
    caminho_arquivo = "/content/drive/MyDrive/ML/credito_bank/data_procesed/data_mod_numb_risck/db_model_risck.csv"
    df = ler_dados(caminho_arquivo)

    if df is None:
        return

    modelo, X_test, y_test, scaler, colunas = preparar_base(df)

    # Captura de novo input
    print("\nInsira os dados do novo cliente:")
    new_data = {
        "sexo": input("Sexo: "),
        "posse_de_veiculo": input("Posse de veículo (True/False): "),
        "posse_de_imovel": input("Posse de imóvel (True/False): "),
        "qtd_filhos": int(input("Quantidade de filhos: ")),
        "tipo_renda": input("Tipo de renda: "),
        "educacao": input("Educação: "),
        "estado_civil": input("Estado civil: "),
        "tipo_residencia": input("Tipo de residência: "),
        "idade": int(input("Idade: ")),
        "tempo_emprego": float(input("Tempo de emprego (anos): ")),
        "qt_pessoas_residencia": int(input("Quantidade de pessoas na residência: ")),
        "renda": float(input("Renda mensal: "))
    }

    risco = prever_inadimplencia(modelo, new_data, colunas, scaler)
    print(f"\nProbabilidade de inadimplência: {risco[1]*100:.2f}%")

if __name__ == "__main__":
    main()