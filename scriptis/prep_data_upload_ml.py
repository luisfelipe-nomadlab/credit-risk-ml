# -*- coding: utf-8 -*-
"""prep_data_upload_ml.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qERmb_VU1GQstLIIDORuI9eG5gOJNSNE
"""

import os
import pandas as pd
import numpy as np
import missingno as msno


def ler_dados(caminho_download):
    """Lê um arquivo CSV e retorna um DataFrame"""
    return pd.read_csv(caminho_download)


def dimensionamento_df(df):
    """Exibe informações básicas do DataFrame"""
    total_linhas = len(df)
    total_colunas = len(df.columns)

    print(f"*Composição do DataFrame*")
    print(f"\n-{total_linhas} linhas e {total_colunas} colunas.")
    print(f"-Colunas: {df.columns.tolist()}")
    print(f"-Frequência dos tipos de dados presentes nas colunas do DataFrame: \n{df.dtypes.value_counts()}")
    print(f"-Tipos por variável: {df.dtypes.tolist()}")

    total_na = df.isna().sum().sum()
    distribuicao_na = df.isna().sum()
    perc_na = distribuicao_na / total_linhas * 100

    df_na = pd.DataFrame({
        "total_na": distribuicao_na,
        "percentual": perc_na.round(2)
    })

    print(f"\n-Total de valores n/a no DataFrame: {total_na}")
    print(f"-Distribuição de valores n/a por variável:\n{df_na}")

    msno.matrix(df)
    print("\n-Amostra das primeiras 5 linhas para inspecionar a estrutura dos dados:")
    print(df.head(5))
    print("\n")


def categorias(df):
    colunas = [
        "sexo", "posse_de_veiculo", "posse_de_imovel", "tipo_renda",
        "educacao", "estado_civil", "tipo_residencia", "mau"
    ]

    for coluna in colunas:
        valores = df[coluna].unique()
        print(f"-Categorias distintas observadas na variável '{coluna}': {valores}")


def map_categorias(df):
    """Mapeia variáveis categóricas para numéricas"""
    sexo_map = {"F": 0, "M": 1}
    veiculo_map = {"N": 0, "S": 1}
    imovel_map = {"N": 0, "S": 1}
    mau_map = {False: 0, True: 1}
    tipo_renda_map = {
        "Empresário": 0, "Servidor público": 1, "Pensionista": 2,
        "Bolsista": 3, "Assalariado": 4
    }
    educacao_map = {
        "Médio": 0, "Superior incompleto": 1, "Superior completo": 2,
        "Fundamental": 3, "Pós graduação": 4
    }
    estado_civil_map = {
        "Casado": 0, "Solteiro": 1, "Separado": 2, "Viúvo": 3, "União": 4
    }
    tipo_residencia_map = {
        "Casa": 0, "Com os pais": 1, "Aluguel": 2,
        "Comunitário": 3, "Governamental": 4, "Estúdio": 5
    }

    df_map = df.copy()
    df_map["sexo"] = df_map["sexo"].map(sexo_map)
    df_map["posse_de_veiculo"] = df_map["posse_de_veiculo"].map(veiculo_map)
    df_map["posse_de_imovel"] = df_map["posse_de_imovel"].map(imovel_map)
    df_map["mau"] = df_map["mau"].map(mau_map)
    df_map["tipo_renda"] = df_map["tipo_renda"].map(tipo_renda_map)
    df_map["educacao"] = df_map["educacao"].map(educacao_map)
    df_map["estado_civil"] = df_map["estado_civil"].map(estado_civil_map)
    df_map["tipo_residencia"] = df_map["tipo_residencia"].map(tipo_residencia_map)

    return df_map


def modelagem(df_map):
    """Limpeza e tratamento final"""
    df_map.drop(["Unnamed: 0", "data_ref"], axis=1, inplace=True)
    df_map.dropna(inplace=True)

    print(f"\n-Tipos após processamento: \n{df_map.dtypes}")
    print(f"\n-Colunas após processamento: {df_map.columns.tolist()}")
    print(f"\n-Distribuição de dados n/a:\n{df_map.isna().sum()}")
    return df_map


def pipeline_principal():
    caminho_download = "/content/drive/MyDrive/ML/credito_bank/data_raw/credit_scoring.csv"
    caminho_upload = "/content/drive/MyDrive/ML/credito_bank/data_procesed/db_model_risck.csv"

    df = ler_dados(caminho_download)
    dimensionamento_df(df)
    categorias(df)
    df_map = map_categorias(df)
    df_final = modelagem(df_map)

    df_final.to_csv(caminho_upload, index=False)
    print(f"\n*Arquivo salvo com sucesso em*: {caminho_upload}")

    return df_final


# Execução do pipeline
df_resultados = pipeline_principal()